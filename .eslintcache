[{"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\index.tsx":"1","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\reportWebVitals.ts":"2","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\App.tsx":"3","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\Navigation.tsx":"4","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\index.tsx":"5","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\Footer.tsx":"6","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\Dashboard.tsx":"7","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\index.ts":"8","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\auth\\authReducers.ts":"9","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\auth\\authTypes.ts":"10","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\Login.tsx":"11","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\AuthService.ts":"12","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\utils\\LocalStorage.ts":"13","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\core\\Constants.ts":"14","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\auth\\authActions.ts":"15","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\core\\Axios.ts":"16","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\CategoryService.ts":"17","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\CategoryItem.ts":"18","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\utils\\MUIDataTableLang.ts":"19","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\shared\\AxiosInterceptorMessage.tsx":"20","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\shared\\Loading.tsx":"21","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\theme\\themeReducers.ts":"22","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\theme\\themeActions.ts":"23","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\theme\\themeTypes.ts":"24","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\Theme.tsx":"25","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\utils\\Alerts.ts":"26","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\Router.tsx":"27","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\PrivateRoute.tsx":"28","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\ReportService.ts":"29","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\Report.ts":"30","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\CategoryList.tsx":"31","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\UserList.tsx":"32","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\UserService.ts":"33","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\UserItem.ts":"34","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\Enum.ts":"35"},{"size":692,"mtime":1613217110422,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":294,"mtime":1612812115400,"results":"39","hashOfConfig":"37"},{"size":6946,"mtime":1612463639940,"results":"40","hashOfConfig":"37"},{"size":3803,"mtime":1610285479114,"results":"41","hashOfConfig":"37"},{"size":545,"mtime":1609685627020,"results":"42","hashOfConfig":"37"},{"size":2703,"mtime":1612648695818,"results":"43","hashOfConfig":"37"},{"size":775,"mtime":1610296116411,"results":"44","hashOfConfig":"37"},{"size":1647,"mtime":1612721317808,"results":"45","hashOfConfig":"37"},{"size":761,"mtime":1612463455798,"results":"46","hashOfConfig":"37"},{"size":4699,"mtime":1615402329418,"results":"47","hashOfConfig":"37"},{"size":544,"mtime":1611596599283,"results":"48","hashOfConfig":"37"},{"size":1722,"mtime":1611605315516,"results":"49","hashOfConfig":"37"},{"size":575,"mtime":1615402356290,"results":"50","hashOfConfig":"37"},{"size":508,"mtime":1612463475671,"results":"51","hashOfConfig":"37"},{"size":2636,"mtime":1615402743374,"results":"52","hashOfConfig":"37"},{"size":1944,"mtime":1613217845168,"results":"53","hashOfConfig":"37"},{"size":776,"mtime":1613217023842,"results":"54","hashOfConfig":"37"},{"size":1269,"mtime":1613217641607,"results":"55","hashOfConfig":"37"},{"size":466,"mtime":1613153203347,"results":"56","hashOfConfig":"37"},{"size":1171,"mtime":1612813670632,"results":"57","hashOfConfig":"37"},{"size":1565,"mtime":1612813356969,"results":"58","hashOfConfig":"37"},{"size":588,"mtime":1612463592288,"results":"59","hashOfConfig":"37"},{"size":840,"mtime":1612463407767,"results":"60","hashOfConfig":"37"},{"size":1196,"mtime":1612640036837,"results":"61","hashOfConfig":"37"},{"size":617,"mtime":1613159445232,"results":"62","hashOfConfig":"37"},{"size":2061,"mtime":1613159321054,"results":"63","hashOfConfig":"37"},{"size":1068,"mtime":1612813445445,"results":"64","hashOfConfig":"37"},{"size":611,"mtime":1612648531662,"results":"65","hashOfConfig":"37"},{"size":334,"mtime":1612648395429,"results":"66","hashOfConfig":"37"},{"size":7555,"mtime":1613218013290,"results":"67","hashOfConfig":"37"},{"size":9525,"mtime":1615577814884,"results":"68","hashOfConfig":"37"},{"size":1819,"mtime":1613217469342,"results":"69","hashOfConfig":"37"},{"size":1006,"mtime":1615581329194,"results":"70","hashOfConfig":"37"},{"size":126,"mtime":1613218273099,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1y8v7z5",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\index.tsx",[],["148","149"],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\reportWebVitals.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\App.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\Navigation.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\index.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\Footer.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\Dashboard.tsx",["150"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Typography, Card, CardContent, CardActions, Button } from '@material-ui/core';\r\nimport ReportService from '../services/ReportService'\r\nimport Report from '../models/Report'\r\n\r\nconst Dashboard: React.FC = () => {\r\n\r\n  const service = new ReportService();\r\n  const [reportData, setReportData] = useState<Report>({\r\n    hotDealCount: 0,\r\n    todayHotDealCount: 0,\r\n    userCount: 0\r\n  } as Report);\r\n  \r\n  useEffect(() => {\r\n    const getItems = async () => {\r\n      try {\r\n        const result = await service.getReport();\r\n        setReportData(result);\r\n      } catch(err){\r\n        console.log(\"err\", err);\r\n      }\r\n    }\r\n    getItems();\r\n  }, []);\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      //minWidth: 275,\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n\r\n        <Grid item xs={12} md={4} lg={4}>\r\n          <Card className={classes.root}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Toplam Kayıtlı Kullanıcı\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"h2\">\r\n                {reportData.userCount} kişi\r\n              </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button size=\"small\">Kullanıcı Listesi</Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={4} lg={4}>\r\n          <Card className={classes.root}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Bugün ki Sıcak Fırsat\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"h2\">\r\n                {reportData.todayHotDealCount} konu\r\n              </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button size=\"small\">Kullanıcı Listesi</Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={4} lg={4}>\r\n          <Card className={classes.root}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Toplam Sıcak Fırsat\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"h2\">\r\n                {reportData.hotDealCount} konu\r\n              </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button size=\"small\">Kullanıcı Listesi</Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport default Dashboard;","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\index.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\auth\\authReducers.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\auth\\authTypes.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\Login.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\AuthService.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\utils\\LocalStorage.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\core\\Constants.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\auth\\authActions.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\core\\Axios.ts",["151"],"import axios, { AxiosError } from 'axios';\r\nimport { API_URL } from '../core/Constants';\r\nimport AxiosInterceptorMessage from '../components/shared/AxiosInterceptorMessage';\r\nimport { Dispatch } from 'redux';\r\nimport { ThemeLoadingAction } from '../redux/theme/themeActions';\r\nimport { LogoutAction } from '../redux/auth/authActions';\r\nimport { History } from 'history';\r\nimport { VariantType } from 'notistack';\r\n\r\nconst defaultOptions = {\r\n    baseURL: API_URL,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n};\r\n\r\nlet instance = axios.create(defaultOptions);\r\n\r\n//https://stackoverflow.com/questions/51778456/how-to-add-global-loading-spin-effect-in-axios-interceptor-for-a-react-project\r\n\r\nexport const AxiosInterceptor = (history: History, dispatch: Dispatch, enqueueSnackbar: Function) => {\r\n\r\n    instance.interceptors.request.use((config) => {\r\n        dispatch(ThemeLoadingAction(true));\r\n        return config;\r\n    });\r\n\r\n    instance.interceptors.response.use(\r\n        (response) => {\r\n            console.log(\"Response\", response);\r\n            setTimeout(() => {\r\n                dispatch(ThemeLoadingAction(false));\r\n            }, 1000);\r\n            \r\n            return response;\r\n        }, (error: AxiosError) => {\r\n            dispatch(ThemeLoadingAction(false));\r\n            if(error.message === 'Network Error' && !error.response){\r\n                //https://bilot.group/articles/using-react-router-inside-axios-interceptors/\r\n                enqueueSnackbar(AxiosInterceptorMessage(\"Ağ hatası - API servisin çalıştığından emin olun.\", error.message), { variant: \"error\" });\r\n            }\r\n            const status = error.response?.status;\r\n            //const data = error.response?.data;\r\n            //const config = error.response?.config;\r\n    \r\n            if(status === 401){\r\n                dispatch(LogoutAction());\r\n                history.push('/login');\r\n\r\n            } else if(status !== 200){\r\n                enqueueSnackbar(AxiosInterceptorMessage(\"Serviste bir hata oluştu\", error.message, status), { variant: \"error\" });\r\n            }\r\n            \r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n}\r\n\r\n\r\nexport const AxiosTokenInterceptor = (token: string) => {\r\n    instance.interceptors.request.use((config) => {\r\n        config.headers[\"Authorization\"] = token ? `Bearer ${token}` : '';\r\n        return config;\r\n    });\r\n}\r\n//https://stackoverflow.com/questions/59335963/react-hooks-display-global-spinner-using-axios-interceptor\r\n//https://ahmetcaglayan.medium.com/axios-interceptors-typescript-13dc26c61b74\r\n\r\n\r\n\r\nexport default instance;","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\CategoryService.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\CategoryItem.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\utils\\MUIDataTableLang.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\shared\\AxiosInterceptorMessage.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\shared\\Loading.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\theme\\themeReducers.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\theme\\themeActions.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\redux\\theme\\themeTypes.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\Theme.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\utils\\Alerts.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\Router.tsx",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\layouts\\PrivateRoute.tsx",["152"],"import React, { useEffect } from 'react';\r\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\r\nimport Layout from './index'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppState from \"../redux/appState\";\r\nimport { RouterTitleAction } from '../redux/theme/themeActions';\r\nimport Loading from '../components/shared/Loading';\r\n\r\ninterface IProps extends RouteProps {\r\n    title: string;\r\n    component: React.ComponentType<any>\r\n}\r\n\r\nconst PrivateRoute = (props: IProps) => {\r\n\r\n    const { title, component: Component, ...rest } = props;\r\n    const dispatch = useDispatch();\r\n    const loggedIn: boolean = useSelector((state: AppState) => state.authReducers.loggedIn);\r\n    const routerTitle = () => dispatch(RouterTitleAction(title));\r\n\r\n   \r\n\r\n\r\n    return (\r\n        <Route {...rest} render={props => {\r\n            routerTitle();\r\n            return !loggedIn ?\r\n                <Redirect to=\"/login\" />\r\n                : <Layout><Loading /><Component {...props} /></Layout>\r\n        }} />\r\n\r\n    );\r\n}\r\nexport default PrivateRoute;","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\ReportService.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\Report.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\CategoryList.tsx",["153"],"import React, { useState, useEffect } from 'react';\r\nimport MUIDataTable, { MUIDataTableColumnDef, MUIDataTableMeta } from \"mui-datatables\";\r\nimport { useSnackbar } from 'notistack';\r\nimport CategoryService from \"../services/CategoryService\";\r\nimport CategoryItem, { CategoryForm } from \"../models/CategoryItem\";\r\nimport MUIDataTableLang from \"../utils/MUIDataTableLang\";\r\nimport { Tooltip, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Alerts from '../utils/Alerts';\r\n\r\nconst CategoryList: React.FC = () => {\r\n  \r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const alert = new Alerts(enqueueSnackbar);\r\n\r\n  const service = new CategoryService();\r\n\r\n  const initialFormState: CategoryForm = {\r\n    id: undefined,\r\n    title: \"\",\r\n    description: \"\"\r\n  };\r\n\r\n  const [items, setItems] = useState<CategoryItem[]>(new Array<CategoryItem>());\r\n  const [form, setForm] = useState<CategoryForm>(initialFormState);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [removeDialogOpen, setRemoveDialogOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getItems = async () => {\r\n      try {\r\n        const result = await service.getItems();\r\n        setItems(result);\r\n      } catch(err){\r\n        console.log(\"[CategoryList] getItems() Error: \", err);\r\n        alert.errorAlert(\"Veriler çekilirken bir hata oluştu.\");\r\n      }\r\n    }\r\n    getItems()\r\n    \r\n  }, []);\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n    setRemoveDialogOpen(false);\r\n    setForm(initialFormState);\r\n  }\r\n  \r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  const handleTableUpdateButton = (tableMeta: MUIDataTableMeta) =>{\r\n    const row: any = tableMeta.tableData[tableMeta.rowIndex];\r\n    const { id, title, description } = row;\r\n    setForm({ ...form, id, title, description });\r\n    setDialogOpen(true);\r\n  }\r\n\r\n  const handleTableRemoveButton = (tableMeta: MUIDataTableMeta) =>{\r\n    const row: any = tableMeta.tableData[tableMeta.rowIndex];\r\n    const { id, title, description } = row;\r\n    setForm({ ...form, id, title, description });\r\n    setRemoveDialogOpen(true);\r\n  }\r\n\r\n\r\n  const handleFormSubmit = async(e: React.FormEvent<HTMLFormElement>) => {\r\n    try {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      const items = form.id ? await service.update(form) : await service.create(form);\r\n      alert.successAlert(\"Başarıyla kayıt edildi.\");\r\n      handleDialogClose();\r\n      setForm(initialFormState);\r\n      setLoading(false);\r\n      items.length > 0 && setItems(items);\r\n    } catch(err){\r\n      console.log(\"[CategoryList] handleFormSubmit() Error: \", err);\r\n      alert.errorAlert(\"Veri kaydedilirken veya güncellenirken bir hata oluştu.\");\r\n    }\r\n  }\r\n\r\n  const handleRemoveFormSubmit = async(e: React.FormEvent<HTMLFormElement>) => {\r\n    try {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      const items = form.id ? await service.delete(form.id) : [];\r\n      alert.successAlert(\"Başarıyla silindi.\");\r\n      handleDialogClose();\r\n      setForm(initialFormState);\r\n      setLoading(false);\r\n      items.length > 0 && setItems(items);\r\n    } catch(err){\r\n      console.log(\"[CategoryList] handleRemoveFormSubmit() Error: \", err);\r\n      alert.errorAlert(\"Silinirken bir hata oluştu.\");\r\n    }\r\n  }\r\n\r\n  const columns: MUIDataTableColumnDef[] = [\r\n    {\r\n      name: \"id\",\r\n      label: \"ID\",\r\n      options: {\r\n        display: false\r\n      }\r\n    },\r\n    {\r\n      name: \"title\",\r\n      label: \"Kategori\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"description\",\r\n      label: \"Açıklama\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"actions\",\r\n      label: \"İşlemler\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: false,\r\n        //setCellProps: () => ({ style: { minWidth: \"1px\", maxWidth: \"1px\" }}),\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <React.Fragment>\r\n              <Tooltip title={\"Düzenle\"}>\r\n                <IconButton onClick={() => handleTableUpdateButton(tableMeta)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip title={\"Sil\"}>\r\n                <IconButton onClick={() => handleTableRemoveButton(tableMeta)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n            </React.Fragment>\r\n          )\r\n        }\r\n      }\r\n    }\r\n  ];\r\n\r\n  const options: any = {\r\n    ...MUIDataTableLang(),\r\n    selectableRows: false,\r\n    customToolbar: () => {\r\n      return (\r\n        <Tooltip title={\"Yeni Ekle\"}>\r\n          <IconButton onClick={() => setDialogOpen(true)}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={dialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n        <form noValidate onSubmit={handleFormSubmit} autoComplete=\"off\">\r\n          <DialogTitle id=\"form-dialog-title\">Yeni Ekle</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"title\"\r\n              label=\"Kategori Adı\"\r\n              name=\"title\"\r\n              autoComplete=\"title\"\r\n              value={form?.title} onChange={handleInputChange}\r\n            />\r\n\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"description\"\r\n              label=\"Açıklama\"\r\n              name=\"description\"\r\n              autoComplete=\"description\"\r\n              value={form?.description} onChange={handleInputChange}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDialogClose} color=\"primary\" disabled={loading}>\r\n              Kapat\r\n          </Button>\r\n            <Button type=\"submit\" color=\"primary\" disabled={loading}>\r\n              Kaydet\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n\r\n      <Dialog open={removeDialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n        <form noValidate onSubmit={handleRemoveFormSubmit} autoComplete=\"off\">\r\n          <DialogTitle id=\"form-dialog-title\">Silme Onayı</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\"><strong>\"{form.title}\"</strong> adlı kategoriyi gerçekten silmek istiyor musunuz ?</DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDialogClose} color=\"primary\" disabled={loading}>\r\n              Kapat\r\n          </Button>\r\n            <Button type=\"submit\" color=\"primary\" disabled={loading}>\r\n              Sil\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      <MUIDataTable\r\n        title={\"Kategori Listesi\"}\r\n        data={items}\r\n        columns={columns}\r\n        options={options}\r\n\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryList;","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\components\\UserList.tsx",["154","155","156","157","158"],"import React, { useState, useEffect } from 'react';\r\nimport MUIDataTable, { MUIDataTableColumnDef, MUIDataTableMeta } from \"mui-datatables\";\r\nimport { useSnackbar } from 'notistack';\r\nimport { USER_ROLES } from \"../core/Constants\";\r\nimport UserService from \"../services/UserService\";\r\nimport UserItem, { UserForm } from \"../models/UserItem\";\r\nimport MUIDataTableLang from \"../utils/MUIDataTableLang\";\r\nimport { Tooltip, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, TextField, FormControlLabel, Checkbox, FormGroup, FormLabel } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Alerts from '../utils/Alerts';\r\n\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\n//import mapValues from \"lodash/mapValues\"; lodash silinecek\r\n\r\nlet initialFormState: UserForm = {\r\n  id: undefined,\r\n  userName: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  name: \"\",\r\n  surname: \"\",\r\n  roles: []\r\n};\r\n\r\nconst UserList: React.FC = () => {\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const alert = new Alerts(enqueueSnackbar);\r\n  const service = new UserService();\r\n\r\n \r\n\r\n  const [items, setItems] = useState<UserItem[]>(new Array<UserItem>());\r\n  //const [form, setForm] = useState<UserForm>(initialFormState);\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [removeDialogOpen, setRemoveDialogOpen] = useState(false);\r\n  \r\n  let { register, handleSubmit, setValue } = useForm<UserForm>({\r\n    defaultValues: initialFormState,\r\n    shouldUnregister: false\r\n  });\r\n  const onSubmit: SubmitHandler<UserForm> = data => console.log(\"atakan\", data);\r\n\r\n  useEffect(() => {\r\n    const getItems = async () => {\r\n      try {\r\n        const result = await service.getItems();\r\n        setItems(result);\r\n      } catch(err){\r\n        console.log(\"[UserList] getItems() Error: \", err);\r\n        alert.errorAlert(\"Veriler çekilirken bir hata oluştu.\");\r\n      }\r\n    }\r\n    getItems();\r\n  }, []);\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n    setRemoveDialogOpen(false);\r\n    //setForm(initialFormState);\r\n  }\r\n  \r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    /*const { name, value } = e.target;\r\n    if(name === \"role\"){\r\n      let roles = form.roles;\r\n      const roleIndex = roles.findIndex((r) => r === value);\r\n      roleIndex === -1 ? roles.push(value) : roles.splice(roleIndex, 1);\r\n      setForm({ ...form, roles });\r\n      return;\r\n    }\r\n    setForm({ ...form, [e.target.name]: e.target.value });*/\r\n  }\r\n\r\n\r\n\r\n  const handleTableUpdateButton = (tableMeta: MUIDataTableMeta) =>{\r\n    const row: any = tableMeta.tableData[tableMeta.rowIndex];\r\n    const search = items.findIndex((i) => i.id === row.id);\r\n    initialFormState = items[search] as UserForm;\r\n    setValue(\"form\", initialFormState);\r\n    setDialogOpen(true);\r\n  }\r\n\r\n  const handleTableRemoveButton = (tableMeta: MUIDataTableMeta) =>{\r\n    const row: any = tableMeta.tableData[tableMeta.rowIndex];\r\n    const find = items.findIndex((i) => i.id === row.id);\r\n    //setForm(items[find] as UserForm);\r\n    setRemoveDialogOpen(true);\r\n  }\r\n\r\n\r\n  const handleFormSubmit = async(e: React.FormEvent<HTMLFormElement>) => {\r\n    /*e.preventDefault();\r\n    setLoading(true);\r\n    const items = form.id ? await service.update(form) : await service.create(form);\r\n    //toast.success(\"Başarıyla kayıt edildi.\");\r\n    handleDialogClose();\r\n    setForm(initialFormState);\r\n    setLoading(false);\r\n    items.length > 0 && setItems(items);*/\r\n  }\r\n\r\n  const handleRemoveFormSubmit = async(e: React.FormEvent<HTMLFormElement>) => {\r\n    /*e.preventDefault();\r\n    setLoading(true);\r\n    const items = form.id ? await service.delete(form.id) : [];\r\n    //toast.success(\"Başarıyla silindi.\");\r\n    handleDialogClose();\r\n    setForm(initialFormState);\r\n    setLoading(false);\r\n    items.length > 0 && setItems(items);*/\r\n  }\r\n  //https://react-hook-form.com/form-builder\r\n  //burada validate için illa type ile vermek lazım. model değilde type olarak vereceğiz\r\n  \r\n  \r\n\r\n  const columns: MUIDataTableColumnDef[] = [\r\n    {\r\n      name: \"id\",\r\n      label: \"ID\",\r\n      options: {\r\n        display: false\r\n      }\r\n    },\r\n    {\r\n      name: \"userName\",\r\n      label: \"Kullanıcı Adı\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"name\",\r\n      label: \"Adı\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"surname\",\r\n      label: \"Soyadı\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"email\",\r\n      label: \"E-Mail\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"actions\",\r\n      label: \"İşlemler\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        empty: false,\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <React.Fragment>\r\n              <Tooltip title={\"Düzenle\"}>\r\n                <IconButton onClick={() => handleTableUpdateButton(tableMeta)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip title={\"Sil\"}>\r\n                <IconButton onClick={() => handleTableRemoveButton(tableMeta)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n            </React.Fragment>\r\n          )\r\n        }\r\n      }\r\n    }\r\n  ];\r\n\r\n\r\n  const options: any = {\r\n    ...MUIDataTableLang(),\r\n    selectableRows: false,\r\n    customToolbar: () => {\r\n      return (\r\n        <Tooltip title={\"Yeni Ekle\"}>\r\n          <IconButton onClick={() => setDialogOpen(true)}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={dialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <DialogTitle id=\"form-dialog-title\">Yeni Ekle</DialogTitle>\r\n          <DialogContent>\r\n            \r\n\r\n            <TextField\r\n              inputRef={register}\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"userName\"\r\n              label=\"Kullanıcı Adı\"\r\n              name=\"form.userName\"\r\n              autoComplete=\"userName\"\r\n            />\r\n\r\n            <TextField\r\n              inputRef={register}\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name\"\r\n              label=\"Ad\"\r\n              name=\"form.name\"\r\n              autoComplete=\"name\"\r\n            />\r\n            <TextField\r\n              inputRef={register}\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"surname\"\r\n              label=\"Soyad\"\r\n              name=\"form.surname\"\r\n              autoComplete=\"surname\"\r\n            />\r\n            <TextField\r\n              inputRef={register}\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"E-Mail\"\r\n              name=\"form.email\"\r\n              autoComplete=\"email\"\r\n            />\r\n          \r\n            <FormGroup style={{marginTop: \"10px\"}}>\r\n              <FormLabel component=\"label\">Kullanıcı İzinleri</FormLabel>\r\n              {\r\n                USER_ROLES.map((role, index) => {\r\n                  const checked = initialFormState.roles.some((r) => r === role);\r\n                  return (\r\n                    <FormControlLabel\r\n                      key={index}\r\n                      control={<Checkbox color=\"primary\" name=\"form.roles\" checked={checked} inputRef={register} />}\r\n                      label={role}\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  )\r\n                })\r\n              }\r\n            </FormGroup>\r\n           \r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDialogClose} color=\"primary\" disabled={loading}>\r\n              Kapat\r\n          </Button>\r\n            <Button type=\"submit\" color=\"primary\" disabled={loading}>\r\n              Kaydet\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n\r\n      <Dialog open={removeDialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n        <form noValidate onSubmit={handleRemoveFormSubmit} autoComplete=\"off\">\r\n          <DialogTitle id=\"form-dialog-title\">Silme Onayı</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\"><strong>\"{/*form.name*/}\"</strong> adlı kullanıcıyı gerçekten silmek istiyor musunuz ?</DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDialogClose} color=\"primary\" disabled={loading}>\r\n              Kapat\r\n          </Button>\r\n            <Button type=\"submit\" color=\"primary\" disabled={loading}>\r\n              Sil\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n\r\n\r\n      <MUIDataTable\r\n        title={\"Kullanıcı Listesi\"}\r\n        data={items}\r\n        columns={columns}\r\n        options={options}\r\n\r\n      />\r\n\r\n\r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport default UserList;","C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\services\\UserService.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\UserItem.ts",[],"C:\\Users\\Atakan\\Documents\\workspace\\SicakIndirimAdmin\\src\\models\\Enum.ts",[],{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":26,"column":6,"nodeType":"165","endLine":26,"endColumn":8,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":8,"column":10,"nodeType":"169","messageId":"170","endLine":8,"endColumn":21},{"ruleId":"167","severity":1,"message":"171","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"163","severity":1,"message":"172","line":44,"column":6,"nodeType":"165","endLine":44,"endColumn":8,"suggestions":"173"},{"ruleId":"167","severity":1,"message":"174","line":38,"column":19,"nodeType":"169","messageId":"170","endLine":38,"endColumn":29},{"ruleId":"163","severity":1,"message":"172","line":59,"column":6,"nodeType":"165","endLine":59,"endColumn":8,"suggestions":"175"},{"ruleId":"167","severity":1,"message":"176","line":67,"column":9,"nodeType":"169","messageId":"170","endLine":67,"endColumn":26},{"ruleId":"167","severity":1,"message":"177","line":91,"column":11,"nodeType":"169","messageId":"170","endLine":91,"endColumn":15},{"ruleId":"167","severity":1,"message":"178","line":97,"column":9,"nodeType":"169","messageId":"170","endLine":97,"endColumn":25},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'service'. Either include it or remove the dependency array.","ArrayExpression",["181"],"@typescript-eslint/no-unused-vars","'VariantType' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'alert' and 'service'. Either include them or remove the dependency array.",["182"],"'setLoading' is assigned a value but never used.",["183"],"'handleInputChange' is assigned a value but never used.","'find' is assigned a value but never used.","'handleFormSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"186","fix":"188"},"Update the dependencies array to be: [service]",{"range":"189","text":"190"},"Update the dependencies array to be: [alert, service]",{"range":"191","text":"192"},{"range":"193","text":"192"},[771,773],"[service]",[1675,1677],"[alert, service]",[2120,2122]]